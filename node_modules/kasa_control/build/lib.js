'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var fetch = require('node-fetch');
var uuid4 = require('uuid4');

var headers = { 'content-type': 'application/json' };

var KasaControl = function () {
  function KasaControl() {
    _classCallCheck(this, KasaControl);

    this.urlBase = 'https://wap.tplinkcloud.com';
  }

  /**
   * Login to Kasa
   * @param  {string} cloudUserName Your tplink-cloud email
   * @param  {string} cloudPassword Your tplink-cloud password
   * @return {Promise}              Resolves with some info about your login
   * @example
  ```js
  kasa.login('email', 'password')
  .then(response => {
    console.log(response)
  })
  .catch(e => console.error(e))
  ```
   */


  _createClass(KasaControl, [{
    key: 'login',
    value: function login(cloudUserName, cloudPassword) {
      var _this = this;

      this.uuid = uuid4();
      this.url = this.urlBase;
      return this.kasa('login', { appType: 'Kasa_Android', cloudUserName: cloudUserName, cloudPassword: cloudPassword, terminalUUID: this.uuid }).then(function (r) {
        _this.url = _this.urlBase + '?token=' + r.token;
        return _extends({}, r, { uuid: _this.uuid });
      });
    }

    // internal method for POSTing to Kasa

  }, {
    key: 'kasa',
    value: function kasa(method, params) {
      if (!this.url) {
        throw new Error('You must login.');
      }
      return fetch(this.url, { method: 'POST', headers: headers, body: JSON.stringify({ method: method, params: params }) }).then(function (r) {
        return r.json();
      }).then(function (r) {
        if (r.error_code) {
          throw new Error(r.msg);
        }
        return r;
      }).then(function (r) {
        return r.result;
      });
    }

    /**
     * Send a message to a lightbulb (for RAW JS message objects)
     * @module send
     * @param {string} deviceId The deviceId of the device in your kasa app
     * @param  {Object} msg Message to send to bulb
     * @return {Promise}    Resolves with answer
     * @example
    ```js
    kasa.send('80126E22B048C76F341BEED1A3EA8E77177F3484', {
    'smartlife.iot.smartbulb.lightingservice': {
      'transition_light_state': {
        'on_off': 1,
        'transition_period': 0
      }
    })
    .then(response => {
      console.log(response)
    })
    .catch(e => console.error(e))
    ```
     */

  }, {
    key: 'send',
    value: function send(deviceId, msg) {
      return this.kasa('passthrough', { deviceId: deviceId, requestData: JSON.stringify(msg) }).then(function (r) {
        return JSON.parse(r.responseData);
      });
    }

    /**
     * Get a list of devices for your Kasa account
     * @module getDevices
     * @return {Promise} Resolves to an array of device-objects
     * @example
    ```js
    kasa.getDevices()
    .then(devices => {
      console.log(devices)
    })
    .catch(e => console.error(e))
    ```
     */

  }, {
    key: 'getDevices',
    value: function getDevices() {
      return this.kasa('getDeviceList').then(function (r) {
        return r.deviceList;
      });
    }

    /**
     * Get info about a device
     * @module info
     * @param  {string} deviceId The deviceId of the device in your kasa app
     * @return {Promise}         Resolves to an info-pbject about your device
     * example
    ```js
    kasa.info('80126E22B048C76F341BEED1A3EA8E77177F3484')
    .then(info => {
      console.log(info)
    })
    .catch(e => console.error(e))
    ```
     */

  }, {
    key: 'info',
    value: function info(deviceId) {
      return this.send(deviceId, { system: { get_sysinfo: {} } }).then(function (r) {
        return r.system.get_sysinfo;
      });
    }

    /**
     * Set power-state of lightbulb
     * @module power
     * @param  {string} deviceId The deviceId of the device in your kasa app
     * @param {Boolean} powerState On or off
     * @param {Number}  transition Transition to new state in this time
     * @param {Object}  options    Object containing `mode`, `hue`, `saturation`, `color_temp`, `brightness`
     * @returns {Promise}          Resolves to output of command
     * @example
     * ```js
    // turn a light on
    kasa.power('80126E22B048C76F341BEED1A3EA8E77177F3484', true)
    .then(status => {
      console.log(status)
    })
    .catch(err => console.error(err))
    ```
     */

  }, {
    key: 'power',
    value: function power(deviceId, powerState, transition, options) {
      var _this2 = this;

      return this.info(deviceId).then(function (info) {
        if (typeof info.relay_state !== 'undefined') {
          return _this2.send(deviceId, {
            system: {
              set_relay_state: {
                state: powerState ? 1 : 0
              }
            }
          });
        } else {
          return _this2.send(deviceId, {
            'smartlife.iot.smartbulb.lightingservice': {
              'transition_light_state': _extends({
                'ignore_default': 1,
                'on_off': powerState ? 1 : 0,
                'transition_period': transition
              }, options)
            }
          }).then(function (r) {
            return r['smartlife.iot.smartbulb.lightingservice']['transition_light_state'];
          });
        }
      });
    }
  }]);

  return KasaControl;
}();

module.exports = KasaControl;

